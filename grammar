# Day- 스위프트 복습(1)

Swift review, day one

변수, 컬렉션, 조건문, 반복문

## 주제

1. Variables and constants  

2. Type of Data

3. Operators

4. String interpolation

5. Arrays

6. Dictionaries

7. Conditional statements

8. Loops

9. Switch case
---

<br>

### 1. Swift의 변수(var)와 상수(let)에 대해서 설명하시오.

```swift
var와 let은 데이터를 저장하는 2가지 방법입니다. 
var는 처음 값을 할당하고 변경이 가능하지만 let은 값을 할당한 뒤에 변경이 불가능합니다.

* class와 같은 참조 객체는 let에 할당하더라도 내부의 값은 변경이 가능합니다.
```
참고: https://nadarm.tistory.com/87

<br>

### 2. Swift의 데이터 타입에 대해서 설명하시오.

```swift
데이터는 각자의 데이터 타입이 존재합니다. Swift에도 여러가지 데이터 타입이 존재합니다.
복잡한 자료형을 제외하면 String, Int, Float, Double, Bool 등이 있습니다.

- String은 문자열, Int는 정수형을 저장합니다.
- Float와 Double은 소수 형태의 숫자를 저장합니다.
(Double의 경우 더 높은 정확도를 가지기 때문에, Apple에서는 Double을 사용하길 권장합니다.)
- Bool은 참/거짓을 저장하는  테이터 타입입니다. true/false의 값을 담습니다.

변수를 만들 때 어떤 유형의 데이터를 보유하는지 알려주는 2가지 방법이 있습니다.
- 값을 직접 할당                    // ex. var age = 25
- 유형 주석(type annoation)사용     // ex. var name: String
                                // name = "Tim" 
```

<br>

### 3. Swift 연산자에 대해서 설명하시오.

```
🌱 산술 연산자
+ : 덧셈    (문자열 결합 가능)
- : 뺄셈
* : 곱셈
/ : 나눗셈
% : 나머지
= : 할당    (+=, -=, *=, /=, %=) - 결합해서 사용 가능

🌱 비교 연산자
>  : 큼
>= : 크거나 같음
<  : 작음
<= : 작거나 같음
== : 같음
!= : 같지 않음

🌱 논리 연산자
&& : 그리고
|| : 또는
```

<br>

### 4. 문자열 보간에 대해서 설명하시오.

```swift
Swift의 특별한 문법 중 하나로 문자열 안에 변수 또는 상수를 결합하는 방법입니다.

// 예시
var name = "taeeehyeon"
print("Hello, my name is \(name)")
```

<br>

### 5. Array에 대해서 설명하시오.

```swift
배열은 많은 데이터를 그룹화할 수 데이터 타입입니다.
대괄호를 사용해서 각 item들을 그룹화하고, 각 item들은 쉼표로 구분됩니다.
각 item의 순서는 0부터 시작되고, Swift는 0부터 계산을 시작합니다.
각 item을 접근하기 위해서는 인덱스를 이용해서 접근합니다.

// 예시
var songs = ["Shake it Off", "You Belong with Me", "Back to December"]
songs[0]
songs[1]
songs[2]

배열을 선언할 때, 어떤 데이터 타입을 담을지 구체적으로 명시해줄 수도 있습니다.

// 예시
var songs: [String] = ["Shake it Off", "You Belong with Me", "Back to December", 3]
var songs: [Any] = ["Shake it Off", "You Belong with Me", "Back to December", 3]

배열을 생성하는 방법은 여러가지 있지만, 대표적으로 아래와 같이 생성합니다.

// 예시
var songs: [String] = []
var songs = [String]()
```

<br>

### 6. Dictionary에 대해서 설명하시오.

```swift
Dictionary는 key와 value의 쌍으로 이루어진 데이터 집합입니다.
키, 콜론, 값을 차례로 작성하여 항목을 만듭니다.

// 예시
var person = [
                "first": "Taylor",
                "middle": "Alison",
                "last": "Swift",
                "month": "December",
                "website": "taylorswift.com"
            ]
// 값에 접근하기 위해 다음과 같은 방법을 사용합니다.
person["middle"]
person["month"]
```

<br>

### 7. Conditional Statements(조건문) 대해서 설명하시오.

```swift
우리는 특정 조건을 만족할때만 코드를 실행시키고 싶습니다. 
다음과 같은 경우에 if ~ else if ~ else 이라고 불리는 조건문을 사용합니다.
조건이 참일때, 거짓일때의 처리를 각각 해줄 수 있습니다.

// 예시 1
var action: String
var person = "hater"

if person == "hater" {
    action = "hate"
} else if person == "player" {
    action = "play"
} else {
    action = "cruise"
}

// 예시 2 - 조건을 작성할 때 논리 연산자를 사용할 수 있습니다.
var action: String
var stayOutTooLate = true
var nothingInBrain = true

if stayOutTooLate && nothingInBrain {
    action = "cruise"
}
```

<br>

### 8. Loop 대해서 설명하시오.

```swift
우리가 항상 고민 해야할 것 중에 하나는 아마도 반복되는 작업을 줄이는 방법이 아닐까 싶습니다. 
코드를 작성할때도 무언가를 만들어낼때도 반복되는 작업은 간단하게 처리할 수 있어야합니다.
Swift에서도 해당 문제를 해결하기 위해 반복문을 제공합니다.

반복문에는 대표적으로 for loop, while loop 가 존재합니다.

// for loop 예시
// loop는 중첩이 가능합니다.
var people = ["players", "haters", "heart-breakers", "fakers"]
var actions = ["play", "hate", "break", "fake"]

for i in 0 ..< people.count {
    var str = "\(people[i]) gonna"

    for _ in 1 ... 5 {
        str += " \(actions[i])"
    }

    print(str)
}

// while loop 예시
var counter = 0

while true {
    print("Counter is now \(counter)")
    counter += 1

    if counter == 556 {
        break
    }
}

반복되는 구조안에서 멈추고 싶으면 break, 계속 진행하고 싶으면 continue 키워드를 사용합니다.
```

<br>

### 9. Switch/case에 대해서 설명하시오.

```swift
switch ~ case 문은 조건문의 또 하나의 형태입니다.
특정한 변수가 주어졌을 때, 해당 변수(조건)에 해당하는 case를 실행할 수 있도록 도와줍니다.
동일한 값을 사용하는 여러 조건이 있다면 switch문을 사용하기 좋을 것 같습니다.

// 예시
let studioAlbums = 5

switch studioAlbums {
case 0...1:
    print("You're just starting out")

case 2...3:
    print("You're a rising star")

case 4...5:
    print("You're world famous!")

default:
    print("Have you done something new?")
}
```
# 스위프트 복습(2)

함수, 옵셔널, 열거형, 구조체와 클래스

## 주제

1. 함수 (Functions)

2. 옵셔널 (Optionals)

3. 옵셔널 체이닝 (Optional chaining)

4. 열거형 (Enumerations)

5. 구조체 (Structs)

6. 클래스 (Classes)

---

<br>

### 1. 함수

```markdown
1) 함수를 왜 사용할까
가정을 하나 해보죠. 우리는 코드를 함수 없이 길게 나열해서 작성하고 있습니다. 그러던 중 여러 개의 반복되는 코드에서 수정할 부분이 생겼어요. 일일이 다 바꿔주기에는 그 작업이 쉽지 않습니다. 중간에 빼먹을 수도 있고, 시간이 오래 걸리기 때문이죠. 

여기에서 함수의 장점이 나옵니다. 반복되는 코드를 하나의 영역, 즉 함수로 만들어서 인스턴스를 생성하는 것으로 다시 바꾸어 보겠습니다. 

수정할 부분이 생기면 일괄적으로 업데이트가 가능해지겠죠? 놓치는 부분 없이 반복되는 부분을 바꿔줄 수 있고 시간도 그만큼 줄일 수 있습니다!
```
```swift
2) 함수의 매개변수 (parameter)
라벨링이라고 불리는 매개변수의 이름을 붙여주는 방식을 4가지로 나누어 볼 수 있을 것 같습니다.

// 1 - 일반적인 방식
func countLettersInString(string: String) {
    print("The string \(string) has \(string.count) letters.")
}

// 1번 같은 경우는 그 의미가 약간 애매모호 합니다.
countLettersInString(string: "Hello")

// 2 - 외부 + 내부 이름을 정해줄 수 있습니다.
// 외부 이름 : myString, 내부 이름 : str
func countLettersInString(myString str: String) {
    print("The string \(str) has \(str.count) letters.")
}

countLettersInString(myString: "Hello") 

// 3 - 외부 이름 생략 
// 언더바(_)를 사용하면 외부 이름을 생략할 수 있습니다.
func countLettersInString(_ str: String) {
    print("The string \(str) has \(str.count) letters.")
}

countLettersInString("Hello")

// 🦊 4 - 의미 있는 이름 부여
func countLetters(in string: String) {
    print("The string \(string) has \(string.count) letters.")
}

// 전치사를 사용하면 그 의미를 좀 더 명확히 해줄 수 있을 것 같습니다.
// 'Hello의 안의 문자를 세라' 라는 의미로 해석할 수 있겠네요
countLetters(in: "Hello")
```
```swift
3) 함수의 반환값 (return)
// -> (화살표)를 이용해서 함수에서 반드시 반환해야 할 값의 유형을 명시해줄 수 있습니다.
func albumIsTaylor(name: String) -> Bool {
    if name == "Taylor Swift" { return true }
    if name == "Fearless" { return true }
    if name == "Speak Now" { return true }
    if name == "Red" { return true }
    if name == "1989" { return true }

    return false
}

// 👍 요즘 Switch ~ case 문에 대해서 많이 경험하고 있는데요.
// 확실히 가독성이 좋아지는 장점이 있는 것 같습니다.
// 적절한 곳에서 사용하도록 합시다!
switch name {
  case "Taylor Swift":
    return true
  case "Fearless":
    return true
  case "Speak Now":
    return true
  case "Red":
    return true
  case "1989":
    return true
  default:
    return false
}
```

<br>

### 2. 옵셔널

```swift
1) 옵셔널 너란 녀석은?
Swift는 안전한 언어입니다. 최대한 자체적으로 안전한 처리를 하려고 하죠. 그러한 처리 중에서 어쩌면 가장 중요한 방법 중에 하나인 옵셔널을 정리해보겠습니다. 옵셔널은 값이 있을 수도 있고, 값이 없을 수도 있음을 표현하기 위한 키워드입니다.

실제로 Swift에서는 일반 변수에 값이 없음을 의미하는 nil을 대입하면 에러를 발생시킵니다. 그런데 항상 값이 있을 수는 없잖아요? 없을 때는 어떻게 하냐! 이 때 옵셔널을 이용해서 표현해줍시다.
```

```swift
var teamName: String?

변수가 의미하는 것을 그대로 해석해보면 팀 이름이 지금 있을 수도 있고 없을 수도 있음을 의미합니다. 옵셔널 (?) 키워드가 붙어있기 때문이죠.
```

```swift
2) 옵셔널 해제 방법
- 옵셔널 바인딩
  - if let {} else {}
  - guard let ~ else {}
- 강제 언래핑 (Force unwrapping optionals) - 사용시 !로 풀어주기
- 암시적 언래핑 (Implicitly unwrapped optionals) - 선언 시 미리 명시
```

```swift
3. 옵셔널 체이닝
옵셔널을 모두 확인하고 해제하는 과정이 약간 번거로워질 수 있을 것 같습니다.  
해결 방법으로 옵셔널 체이닝을 이용할 수 있는데요
```

```swift
let album = albumReleased(year: 2006)?.someOptionalValue?.someOtherOptionalValue?.whatever

// 위와 같은 코드가 있을 때
// 옵셔널 체인으로 연결되어 있는 코드는 왼쪽에서 오른쪽으로 옵셔널을 체크해나갑니다.
// 중간에 체크하다가 값이 없다면, 즉 nil이라면 즉시 nil을 반환해줍니다.
// 깔끔하게 옵셔널을 체크해줄 수 있겠죠.
```

```swift
4. nil 병합 연산자
??를 사용해서 값이 있을 때 사용할 값과 없을 때(nil일 때) 사용할 값을 정해줄 수 있습니다. 

let album = albumReleased(year: 2006) ?? "unknown"
print("The album is \(album)")
```

<br>

### 3. 열거형

```swift
열거형은 사용자가 스스로 타입을 만들 수가 있고, switch ~ case와 사용할 때 그 빛을 냅니다.
이 부분은 많이 사용해봐야할 것 같습니다. 내용에 대해서 자세히 알고 싶으시면 이전 글을 참고해주세요.

// 선언과 사용방법입니다.
enum WeatherType {
    case sun
    case cloud
    case rain
    case wind(speed: Int)
    case snow
}

func getHaterStatus(weather: WeatherType) -> String? {
    switch weather {
    case .sun:
        return nil
    case .wind(let speed) where speed < 10:
        return "meh"
    case .cloud, .wind:
        return "dislike"
    case .rain, .snow:
        return "hate"
    }
}

getHaterStatus(weather: WeatherType.wind(speed: 5))
```

<br>

### 4. 구조체와 클래스

```
차이만 간단히 짚어보겠습니다.
해당 부분은 나중에 하나의 토픽으로 정리하는 것이 좋아보입니다! 😀

구조체
  - call by value : copy and write (값 자체 복사)
  - 상속 불가능
  - stack memory (속도 빠름)
  - 기본 이니셜라이저 제공
  - AnyObject로 타입 캐스팅 불가능
클래스
  - call by reference : memory address copy
  - 상속 가능
  - heap memory에 할당 (속도 느림)
```
